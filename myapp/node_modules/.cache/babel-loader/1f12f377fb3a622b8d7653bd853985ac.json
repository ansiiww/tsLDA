{"ast":null,"code":"import * as d3 from 'd3';\n\nclass TopicDoc extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  reorderDocuments() {\n    var format = d3.format(\".2g\");\n\n    if (selectedTopic === -1) {\n      documents.sort(function (a, b) {\n        return d3.ascending(a.originalOrder, b.originalOrder);\n      });\n      d3.selectAll(\"div.document\").data(documents).style(\"display\", \"block\").text(function (d) {\n        return \"[\" + d.id + \"] \" + truncate(d.originalText);\n      });\n    } else {\n      var scores = documents.map(function (doc, i) {\n        return {\n          docID: i,\n          score: (doc.topicCounts[selectedTopic] + docSortSmoothing) / (doc.tokens.length + sumDocSortSmoothing)\n        };\n      });\n      scores.sort(function (a, b) {\n        return b.score - a.score;\n      });\n      /*documents.sort(function(a, b) {\n          var score1 = (a.topicCounts[selectedTopic] + docSortSmoothing) / (a.tokens.length + sumDocSortSmoothing);\n          var score2 = (b.topicCounts[selectedTopic] + docSortSmoothing) / (b.tokens.length + sumDocSortSmoothing);\n          return d3.descending(score1, score2);\n      }); */\n\n      d3.selectAll(\"div.document\").data(scores).style(\"display\", function (d) {\n        return documents[d.docID].topicCounts[selectedTopic] > 0 ? \"block\" : \"none\";\n      }).text(function (d) {\n        return \"[\" + documents[d.docID].id + \"/\" + format(d.score * 100) + \"%] \" + truncate(documents[d.docID].originalText);\n      });\n    }\n  }\n\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps) {\n    this.reorderDocuments();\n  }\n\n  render() {}\n\n}","map":{"version":3,"sources":["/Users/tatsukikuze12/Desktop/PastClasses/SummerResearch/jsLDAcopy/myapp/src/docpage.js"],"names":["d3","TopicDoc","Component","state","reorderDocuments","format","selectedTopic","documents","sort","a","b","ascending","originalOrder","selectAll","data","style","text","d","id","truncate","originalText","scores","map","doc","i","docID","score","topicCounts","docSortSmoothing","tokens","length","sumDocSortSmoothing","componentDidMount","componentDidUpdate","prevProps","render"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,QAAN,SAAuBC,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC7BC,KAD6B,GACrB,EADqB;AAAA;;AAI7BC,EAAAA,gBAAgB,GAAG;AACf,QAAIC,MAAM,GAAGL,EAAE,CAACK,MAAH,CAAU,KAAV,CAAb;;AAEA,QAAIC,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxBC,MAAAA,SAAS,CAACC,IAAV,CAAe,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAAE,eAAOV,EAAE,CAACW,SAAH,CAAaF,CAAC,CAACG,aAAf,EAA8BF,CAAC,CAACE,aAAhC,CAAP;AAAwD,OAAxF;AACAZ,MAAAA,EAAE,CAACa,SAAH,CAAa,cAAb,EAA6BC,IAA7B,CAAkCP,SAAlC,EACCQ,KADD,CACO,SADP,EACkB,OADlB,EAECC,IAFD,CAEM,UAASC,CAAT,EAAY;AAAE,eAAO,MAAMA,CAAC,CAACC,EAAR,GAAa,IAAb,GAAoBC,QAAQ,CAACF,CAAC,CAACG,YAAH,CAAnC;AAAsD,OAF1E;AAGD,KALD,MAMK;AACH,UAAIC,MAAM,GAAGd,SAAS,CAACe,GAAV,CAAc,UAAUC,GAAV,EAAeC,CAAf,EAAkB;AAC3C,eAAO;AAACC,UAAAA,KAAK,EAAED,CAAR;AAAWE,UAAAA,KAAK,EAAE,CAACH,GAAG,CAACI,WAAJ,CAAgBrB,aAAhB,IAAiCsB,gBAAlC,KAAuDL,GAAG,CAACM,MAAJ,CAAWC,MAAX,GAAoBC,mBAA3E;AAAlB,SAAP;AACD,OAFY,CAAb;AAGAV,MAAAA,MAAM,CAACb,IAAP,CAAY,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACzB,eAAOA,CAAC,CAACgB,KAAF,GAAUjB,CAAC,CAACiB,KAAnB;AACD,OAFD;AAGA;;;;;;AAKA1B,MAAAA,EAAE,CAACa,SAAH,CAAa,cAAb,EAA6BC,IAA7B,CAAkCO,MAAlC,EACGN,KADH,CACS,SADT,EACoB,UAASE,CAAT,EAAY;AAAE,eAAOV,SAAS,CAACU,CAAC,CAACQ,KAAH,CAAT,CAAmBE,WAAnB,CAA+BrB,aAA/B,IAAgD,CAAhD,GAAoD,OAApD,GAA8D,MAArE;AAA8E,OADhH,EAEGU,IAFH,CAEQ,UAASC,CAAT,EAAY;AAAE,eAAO,MAAMV,SAAS,CAACU,CAAC,CAACQ,KAAH,CAAT,CAAmBP,EAAzB,GAA8B,GAA9B,GAAoCb,MAAM,CAACY,CAAC,CAACS,KAAF,GAAU,GAAX,CAA1C,GAA4D,KAA5D,GAAoEP,QAAQ,CAACZ,SAAS,CAACU,CAAC,CAACQ,KAAH,CAAT,CAAmBL,YAApB,CAAnF;AAAuH,OAF7I;AAGA;AACH;;AAGHY,EAAAA,iBAAiB,GAAG,CACnB;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,SAAK9B,gBAAL;AACH;;AAED+B,EAAAA,MAAM,GAAG,CAER;;AAzC4B","sourcesContent":["import * as d3 from 'd3';\n\nclass TopicDoc extends Component {\n    state = {\n    };\n\n    reorderDocuments() {\n        var format = d3.format(\".2g\");\n      \n        if (selectedTopic === -1) {\n          documents.sort(function(a, b) { return d3.ascending(a.originalOrder, b.originalOrder); });\n          d3.selectAll(\"div.document\").data(documents)\n          .style(\"display\", \"block\")\n          .text(function(d) { return \"[\" + d.id + \"] \" + truncate(d.originalText); });\n        }\n        else {\n          var scores = documents.map(function (doc, i) {\n            return {docID: i, score: (doc.topicCounts[selectedTopic] + docSortSmoothing) / (doc.tokens.length + sumDocSortSmoothing)};\n          });\n          scores.sort(function(a, b) {\n            return b.score - a.score;\n          });\n          /*documents.sort(function(a, b) {\n              var score1 = (a.topicCounts[selectedTopic] + docSortSmoothing) / (a.tokens.length + sumDocSortSmoothing);\n              var score2 = (b.topicCounts[selectedTopic] + docSortSmoothing) / (b.tokens.length + sumDocSortSmoothing);\n              return d3.descending(score1, score2);\n          }); */\n          d3.selectAll(\"div.document\").data(scores)\n            .style(\"display\", function(d) { return documents[d.docID].topicCounts[selectedTopic] > 0 ? \"block\" : \"none\"; })\n            .text(function(d) { return \"[\" + documents[d.docID].id + \"/\" + format(d.score * 100) + \"%] \" + truncate(documents[d.docID].originalText); });\n         }\n      }\n    \n    \n    componentDidMount() {\n    }\n\n    componentDidUpdate(prevProps) {\n        this.reorderDocuments();\n    }\n\n    render() {\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}