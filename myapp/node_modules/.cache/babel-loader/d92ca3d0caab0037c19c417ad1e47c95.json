{"ast":null,"code":"import './App.css';\nimport './funcs/processing.js';\nimport './funcs/processVars.js';\nimport './funcs/correlationVars.js';\nimport './funcs/correlation.js';\nimport './funcs/d3.min.js';\nimport './funcs/display';\nimport './funcs/displayVars';\nimport './funcs/docsUp';\nimport './funcs/docsUpVar';\nimport './funcs/downloads';\nimport './funcs/downloadsVars';\nimport './funcs/stoplist';\nimport './funcs/stoplistVars';\nimport './funcs/sweep';\nimport './funcs/sweepVars';\nimport './funcs/topicDocuments';\nimport './funcs/topictime';\nimport './funcs/topictimeVars';\nimport './funcs/topidDocVars';\nimport './funcs/vocab';\nimport './funcs/vocabVars';\nexport function queueLoad() {\n  reset();\n  d3.queue().defer(getStoplistUpload).defer(getDocsUpload).await(ready);\n}\n\nfunction reset() {\n  vocabularySize = 0;\n  vocabularyCounts = {};\n  displayingStopwords = false;\n  sortVocabByTopic = false;\n  specificityScale = d3.scaleLinear().domain([0, 1]).range([\"#ffffff\", \"#99d8c9\"]);\n  d3.select(\"#num-topics-input\").property(\"value\", numTopics);\n  stopwords = {};\n  completeSweeps = 0;\n  requestedSweeps = 0;\n  d3.select(\"#iters\").text(completeSweeps);\n  selectedTopic = -1;\n  wordTopicCounts = {};\n  topicWordCounts = [];\n  tokensPerTopic = zeros(numTopics);\n  topicWeights = zeros(numTopics);\n  documents = [];\n  d3.selectAll(\"div.document\").remove();\n}\n\nfunction ready(error, stops, lines) {\n  if (error) {\n    alert(\"File upload failed. Please try again.\");\n    throw error;\n  } else {\n    // Create the stoplist\n    console.log(stops);\n    stops.split(/\\s+/).forEach(function (w) {\n      console.log(w);\n      stopwords[w] = 1;\n    }); // Load documents and populate the vocabulary\n\n    lines.split(\"\\n\").forEach(parseLine);\n    sortTopicWords();\n    displayTopicWords();\n    toggleTopicDocuments(0); //plotGraph();\n\n    plotMatrix();\n    vocabTable();\n    createTimeSVGs();\n    timeSeries();\n  }\n}\n\nfunction parseLine(line) {\n  if (line == \"\") {\n    return;\n  }\n\n  var docID = documents.length;\n  var docDate = \"\";\n  var fields = line.split(\"\\t\");\n  var text = fields[0]; // Assume there's just one field, the text\n\n  if (fields.length == 3) {\n    // If it's in [ID]\\t[TAG]\\t[TEXT] format...\n    docID = fields[0];\n    docDate = fields[1]; // do not interpret date as anything but a string\n\n    text = fields[2];\n  }\n\n  var tokens = [];\n  var rawTokens = text.toLowerCase().match(wordPattern);\n\n  if (rawTokens == null) {\n    return;\n  }\n\n  var topicCounts = zeros(numTopics);\n  rawTokens.forEach(function (word) {\n    if (word !== \"\") {\n      var topic = Math.floor(Math.random() * numTopics);\n\n      if (word.length <= 2) {\n        stopwords[word] = 1;\n      }\n\n      var isStopword = stopwords[word];\n\n      if (isStopword) {\n        // Record counts for stopwords, but nothing else\n        if (!vocabularyCounts[word]) {\n          vocabularyCounts[word] = 1;\n        } else {\n          vocabularyCounts[word] += 1;\n        }\n      } else {\n        tokensPerTopic[topic]++;\n\n        if (!wordTopicCounts[word]) {\n          wordTopicCounts[word] = {};\n          vocabularySize++;\n          vocabularyCounts[word] = 0;\n        }\n\n        if (!wordTopicCounts[word][topic]) {\n          wordTopicCounts[word][topic] = 0;\n        }\n\n        wordTopicCounts[word][topic] += 1;\n        vocabularyCounts[word] += 1;\n        topicCounts[topic] += 1;\n      }\n\n      tokens.push({\n        \"word\": word,\n        \"topic\": topic,\n        \"isStopword\": isStopword\n      });\n    }\n  });\n  documents.push({\n    \"originalOrder\": documents.length,\n    \"id\": docID,\n    \"date\": docDate,\n    \"originalText\": text,\n    \"tokens\": tokens,\n    \"topicCounts\": topicCounts\n  });\n  d3.select(\"div#docs-page\").append(\"div\").attr(\"class\", \"document\").text(\"[\" + docID + \"] \" + truncate(text));\n} // used by addStop, removeStop in vocab, saveTopicKeys in downloads, sweep in sweep\n\n\nfunction sortTopicWords() {\n  topicWordCounts = [];\n\n  for (var topic = 0; topic < numTopics; topic++) {\n    topicWordCounts[topic] = [];\n  }\n\n  for (var word in wordTopicCounts) {\n    for (var topic in wordTopicCounts[word]) {\n      topicWordCounts[topic].push({\n        \"word\": word,\n        \"count\": wordTopicCounts[word][topic]\n      });\n    }\n  }\n\n  for (var topic = 0; topic < numTopics; topic++) {\n    topicWordCounts[topic].sort(byCountDescending);\n  }\n} // Used by saveDocTopics, saveTopicWords, saveGraph in downloads, getTopicCorrelations in correlation\n\n\nfunction zeros(n) {\n  var x = new Array(n);\n\n  for (var i = 0; i < n; i++) {\n    x[i] = 0.0;\n  }\n\n  return x;\n} // Change the strings at the end of these lines to reset the default filenames!\n\n\nfunction onDocumentFileChange(input) {\n  documentsFileArray = input.files;\n}\n\nfunction onStopwordFileChange(input) {\n  stoplistFileArray = input.files;\n} // This function is the callback for \"input\", it changes as we move the slider\n//  without releasing it.\n\n\nfunction updateTopicCount(input) {\n  d3.select(\"#num_topics_display\").text(input.value);\n} // This function is the callback for \"change\", it only fires when we release the\n//  slider to select a new value.\n\n\nfunction onTopicsChange(input) {\n  console.log(\"Changing # of topics: \" + input.value);\n  var newNumTopics = Number(input.value);\n\n  if (!isNaN(newNumTopics) && newNumTopics > 0 && newNumTopics !== numTopics) {\n    changeNumTopics(Number(input.value));\n  }\n}\n\nfunction changeNumTopics(numTopics_) {\n  numTopics = numTopics_;\n  selectedTopic = -1;\n  completeSweeps = 0;\n  requestedSweeps = 0;\n  d3.select(\"#iters\").text(completeSweeps);\n  wordTopicCounts = {};\n  Object.keys(vocabularyCounts).forEach(function (word) {\n    wordTopicCounts[word] = {};\n  });\n  topicWordCounts = [];\n  tokensPerTopic = zeros(numTopics);\n  topicWeights = zeros(numTopics);\n  documents.forEach(function (currentDoc, i) {\n    currentDoc.topicCounts = zeros(numTopics);\n\n    for (var position = 0; position < currentDoc.tokens.length; position++) {\n      var token = currentDoc.tokens[position];\n      token.topic = Math.floor(Math.random() * numTopics);\n\n      if (!token.isStopword) {\n        tokensPerTopic[token.topic]++;\n\n        if (!wordTopicCounts[token.word][token.topic]) {\n          wordTopicCounts[token.word][token.topic] = 1;\n        } else {\n          wordTopicCounts[token.word][token.topic] += 1;\n        }\n\n        currentDoc.topicCounts[token.topic] += 1;\n      }\n    }\n  });\n  sortTopicWords();\n  displayTopicWords();\n  reorderDocuments();\n  vocabTable(); // Restart the visualizations\n\n  createTimeSVGs();\n  timeSeries();\n  plotMatrix();\n}","map":{"version":3,"sources":["/Users/tatsukikuze12/Desktop/PastClasses/SummerResearch/jsLDAcopy/myapp/src/funcs/processing.js"],"names":["queueLoad","reset","d3","queue","defer","getStoplistUpload","getDocsUpload","await","ready","vocabularySize","vocabularyCounts","displayingStopwords","sortVocabByTopic","specificityScale","scaleLinear","domain","range","select","property","numTopics","stopwords","completeSweeps","requestedSweeps","text","selectedTopic","wordTopicCounts","topicWordCounts","tokensPerTopic","zeros","topicWeights","documents","selectAll","remove","error","stops","lines","alert","console","log","split","forEach","w","parseLine","sortTopicWords","displayTopicWords","toggleTopicDocuments","plotMatrix","vocabTable","createTimeSVGs","timeSeries","line","docID","length","docDate","fields","tokens","rawTokens","toLowerCase","match","wordPattern","topicCounts","word","topic","Math","floor","random","isStopword","push","append","attr","truncate","sort","byCountDescending","n","x","Array","i","onDocumentFileChange","input","documentsFileArray","files","onStopwordFileChange","stoplistFileArray","updateTopicCount","value","onTopicsChange","newNumTopics","Number","isNaN","changeNumTopics","numTopics_","Object","keys","currentDoc","position","token","reorderDocuments"],"mappings":"AAAA,OAAO,WAAP;AACA,OAAO,uBAAP;AACA,OAAO,wBAAP;AACA,OAAO,4BAAP;AACA,OAAO,wBAAP;AACA,OAAO,mBAAP;AACA,OAAO,iBAAP;AACA,OAAO,qBAAP;AACA,OAAO,gBAAP;AACA,OAAO,mBAAP;AACA,OAAO,mBAAP;AACA,OAAO,uBAAP;AACA,OAAO,kBAAP;AACA,OAAO,sBAAP;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,OAAO,wBAAP;AACA,OAAO,mBAAP;AACA,OAAO,uBAAP;AACA,OAAO,sBAAP;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AAGA,OAAO,SAASA,SAAT,GAAqB;AACxBC,EAAAA,KAAK;AACLC,EAAAA,EAAE,CAACC,KAAH,GACGC,KADH,CACSC,iBADT,EAEGD,KAFH,CAESE,aAFT,EAGGC,KAHH,CAGSC,KAHT;AAID;;AAEH,SAASP,KAAT,GAAiB;AACbQ,EAAAA,cAAc,GAAG,CAAjB;AACAC,EAAAA,gBAAgB,GAAG,EAAnB;AACAC,EAAAA,mBAAmB,GAAG,KAAtB;AACAC,EAAAA,gBAAgB,GAAG,KAAnB;AACAC,EAAAA,gBAAgB,GAAGX,EAAE,CAACY,WAAH,GAAiBC,MAAjB,CAAwB,CAAC,CAAD,EAAG,CAAH,CAAxB,EAA+BC,KAA/B,CAAqC,CAAC,SAAD,EAAY,SAAZ,CAArC,CAAnB;AAEAd,EAAAA,EAAE,CAACe,MAAH,CAAU,mBAAV,EAA+BC,QAA/B,CAAwC,OAAxC,EAAiDC,SAAjD;AAEAC,EAAAA,SAAS,GAAG,EAAZ;AAEAC,EAAAA,cAAc,GAAG,CAAjB;AACAC,EAAAA,eAAe,GAAG,CAAlB;AACApB,EAAAA,EAAE,CAACe,MAAH,CAAU,QAAV,EAAoBM,IAApB,CAAyBF,cAAzB;AAEAG,EAAAA,aAAa,GAAG,CAAC,CAAjB;AAEAC,EAAAA,eAAe,GAAG,EAAlB;AACAC,EAAAA,eAAe,GAAG,EAAlB;AACAC,EAAAA,cAAc,GAAGC,KAAK,CAACT,SAAD,CAAtB;AACAU,EAAAA,YAAY,GAAGD,KAAK,CAACT,SAAD,CAApB;AAEAW,EAAAA,SAAS,GAAG,EAAZ;AACA5B,EAAAA,EAAE,CAAC6B,SAAH,CAAa,cAAb,EAA6BC,MAA7B;AACD;;AAEH,SAASxB,KAAT,CAAeyB,KAAf,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;AAChC,MAAIF,KAAJ,EAAW;AAAEG,IAAAA,KAAK,CAAC,uCAAD,CAAL;AAAgD,UAAMH,KAAN;AAAa,GAA1E,MACK;AACH;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACAA,IAAAA,KAAK,CAACK,KAAN,CAAY,KAAZ,EAAmBC,OAAnB,CAA2B,UAAUC,CAAV,EAAa;AAAEJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AAAgBrB,MAAAA,SAAS,CAACqB,CAAD,CAAT,GAAe,CAAf;AAAmB,KAA7E,EAHG,CAKH;;AACAN,IAAAA,KAAK,CAACI,KAAN,CAAY,IAAZ,EAAkBC,OAAlB,CAA0BE,SAA1B;AAEAC,IAAAA,cAAc;AACdC,IAAAA,iBAAiB;AACjBC,IAAAA,oBAAoB,CAAC,CAAD,CAApB,CAVG,CAWH;;AAEAC,IAAAA,UAAU;AACVC,IAAAA,UAAU;AACVC,IAAAA,cAAc;AACdC,IAAAA,UAAU;AACX;AACF;;AAEH,SAASP,SAAT,CAAqBQ,IAArB,EAA4B;AACxB,MAAIA,IAAI,IAAI,EAAZ,EAAgB;AAAE;AAAS;;AAC3B,MAAIC,KAAK,GAAGrB,SAAS,CAACsB,MAAtB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,MAAM,GAAGJ,IAAI,CAACX,KAAL,CAAW,IAAX,CAAb;AACA,MAAIhB,IAAI,GAAG+B,MAAM,CAAC,CAAD,CAAjB,CALwB,CAKD;;AACvB,MAAIA,MAAM,CAACF,MAAP,IAAiB,CAArB,EAAwB;AAAG;AACzBD,IAAAA,KAAK,GAAGG,MAAM,CAAC,CAAD,CAAd;AACAD,IAAAA,OAAO,GAAGC,MAAM,CAAC,CAAD,CAAhB,CAFsB,CAED;;AACrB/B,IAAAA,IAAI,GAAG+B,MAAM,CAAC,CAAD,CAAb;AACD;;AAED,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,SAAS,GAAGjC,IAAI,CAACkC,WAAL,GAAmBC,KAAnB,CAAyBC,WAAzB,CAAhB;;AACA,MAAIH,SAAS,IAAI,IAAjB,EAAuB;AAAE;AAAS;;AAClC,MAAII,WAAW,GAAGhC,KAAK,CAACT,SAAD,CAAvB;AAEAqC,EAAAA,SAAS,CAAChB,OAAV,CAAkB,UAAUqB,IAAV,EAAgB;AAChC,QAAIA,IAAI,KAAK,EAAb,EAAiB;AACf,UAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB9C,SAA3B,CAAZ;;AAEA,UAAI0C,IAAI,CAACT,MAAL,IAAe,CAAnB,EAAsB;AAAEhC,QAAAA,SAAS,CAACyC,IAAD,CAAT,GAAkB,CAAlB;AAAsB;;AAE9C,UAAIK,UAAU,GAAG9C,SAAS,CAACyC,IAAD,CAA1B;;AACA,UAAIK,UAAJ,EAAgB;AACd;AACA,YAAI,CAAExD,gBAAgB,CAACmD,IAAD,CAAtB,EAA8B;AAC5BnD,UAAAA,gBAAgB,CAACmD,IAAD,CAAhB,GAAyB,CAAzB;AACD,SAFD,MAGK;AACHnD,UAAAA,gBAAgB,CAACmD,IAAD,CAAhB,IAA0B,CAA1B;AACD;AACF,OARD,MASK;AACHlC,QAAAA,cAAc,CAACmC,KAAD,CAAd;;AACA,YAAI,CAAErC,eAAe,CAACoC,IAAD,CAArB,EAA6B;AAC3BpC,UAAAA,eAAe,CAACoC,IAAD,CAAf,GAAwB,EAAxB;AACApD,UAAAA,cAAc;AACdC,UAAAA,gBAAgB,CAACmD,IAAD,CAAhB,GAAyB,CAAzB;AACD;;AACD,YAAI,CAAEpC,eAAe,CAACoC,IAAD,CAAf,CAAsBC,KAAtB,CAAN,EAAoC;AAClCrC,UAAAA,eAAe,CAACoC,IAAD,CAAf,CAAsBC,KAAtB,IAA+B,CAA/B;AACD;;AACDrC,QAAAA,eAAe,CAACoC,IAAD,CAAf,CAAsBC,KAAtB,KAAgC,CAAhC;AACApD,QAAAA,gBAAgB,CAACmD,IAAD,CAAhB,IAA0B,CAA1B;AACAD,QAAAA,WAAW,CAACE,KAAD,CAAX,IAAsB,CAAtB;AACD;;AACDP,MAAAA,MAAM,CAACY,IAAP,CAAY;AAAC,gBAAON,IAAR;AAAc,iBAAQC,KAAtB;AAA6B,sBAAaI;AAA1C,OAAZ;AACD;AACF,GAhCD;AAkCApC,EAAAA,SAAS,CAACqC,IAAV,CAAe;AAAE,qBAAkBrC,SAAS,CAACsB,MAA9B;AAAsC,UAAOD,KAA7C;AAAoD,YAASE,OAA7D;AAAsE,oBAAiB9B,IAAvF;AAA6F,cAAWgC,MAAxG;AAAgH,mBAAgBK;AAAhI,GAAf;AACA1D,EAAAA,EAAE,CAACe,MAAH,CAAU,eAAV,EAA2BmD,MAA3B,CAAkC,KAAlC,EACIC,IADJ,CACS,OADT,EACkB,UADlB,EAEI9C,IAFJ,CAES,MAAM4B,KAAN,GAAc,IAAd,GAAqBmB,QAAQ,CAAC/C,IAAD,CAFtC;AAGD,C,CACH;;;AACA,SAASoB,cAAT,GAA0B;AACtBjB,EAAAA,eAAe,GAAG,EAAlB;;AACA,OAAK,IAAIoC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG3C,SAA5B,EAAuC2C,KAAK,EAA5C,EAAgD;AAC9CpC,IAAAA,eAAe,CAACoC,KAAD,CAAf,GAAyB,EAAzB;AACD;;AAED,OAAK,IAAID,IAAT,IAAiBpC,eAAjB,EAAkC;AAChC,SAAK,IAAIqC,KAAT,IAAkBrC,eAAe,CAACoC,IAAD,CAAjC,EAAyC;AACvCnC,MAAAA,eAAe,CAACoC,KAAD,CAAf,CAAuBK,IAAvB,CAA4B;AAAC,gBAAON,IAAR;AAAc,iBAAQpC,eAAe,CAACoC,IAAD,CAAf,CAAsBC,KAAtB;AAAtB,OAA5B;AACD;AACF;;AAED,OAAK,IAAIA,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG3C,SAA5B,EAAuC2C,KAAK,EAA5C,EAAgD;AAC9CpC,IAAAA,eAAe,CAACoC,KAAD,CAAf,CAAuBS,IAAvB,CAA4BC,iBAA5B;AACD;AACF,C,CAEH;;;AACA,SAAS5C,KAAT,CAAe6C,CAAf,EAAkB;AAChB,MAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAUF,CAAV,CAAR;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuBG,CAAC,EAAxB,EAA4B;AAAEF,IAAAA,CAAC,CAACE,CAAD,CAAD,GAAO,GAAP;AAAa;;AAC3C,SAAOF,CAAP;AACD,C,CAGD;;;AAGA,SAASG,oBAAT,CAA8BC,KAA9B,EAAqC;AACnCC,EAAAA,kBAAkB,GAAGD,KAAK,CAACE,KAA3B;AACD;;AACD,SAASC,oBAAT,CAA8BH,KAA9B,EAAqC;AACnCI,EAAAA,iBAAiB,GAAGJ,KAAK,CAACE,KAA1B;AACD,C,CAED;AACA;;;AACA,SAASG,gBAAT,CAA0BL,KAA1B,EAAiC;AAC/B5E,EAAAA,EAAE,CAACe,MAAH,CAAU,qBAAV,EAAiCM,IAAjC,CAAsCuD,KAAK,CAACM,KAA5C;AACD,C,CACD;AACA;;;AACA,SAASC,cAAT,CAAwBP,KAAxB,EAA+B;AAC7BzC,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BwC,KAAK,CAACM,KAA7C;AAEA,MAAIE,YAAY,GAAGC,MAAM,CAACT,KAAK,CAACM,KAAP,CAAzB;;AACA,MAAI,CAAEI,KAAK,CAACF,YAAD,CAAP,IAAyBA,YAAY,GAAG,CAAxC,IAA6CA,YAAY,KAAKnE,SAAlE,EAA6E;AAC3EsE,IAAAA,eAAe,CAACF,MAAM,CAACT,KAAK,CAACM,KAAP,CAAP,CAAf;AACD;AACF;;AAED,SAASK,eAAT,CAAyBC,UAAzB,EAAqC;AACnCvE,EAAAA,SAAS,GAAGuE,UAAZ;AACAlE,EAAAA,aAAa,GAAG,CAAC,CAAjB;AAEAH,EAAAA,cAAc,GAAG,CAAjB;AACAC,EAAAA,eAAe,GAAG,CAAlB;AACApB,EAAAA,EAAE,CAACe,MAAH,CAAU,QAAV,EAAoBM,IAApB,CAAyBF,cAAzB;AAEAI,EAAAA,eAAe,GAAG,EAAlB;AACAkE,EAAAA,MAAM,CAACC,IAAP,CAAYlF,gBAAZ,EAA8B8B,OAA9B,CAAsC,UAAUqB,IAAV,EAAgB;AAAEpC,IAAAA,eAAe,CAACoC,IAAD,CAAf,GAAwB,EAAxB;AAA4B,GAApF;AAEAnC,EAAAA,eAAe,GAAG,EAAlB;AACAC,EAAAA,cAAc,GAAGC,KAAK,CAACT,SAAD,CAAtB;AACAU,EAAAA,YAAY,GAAGD,KAAK,CAACT,SAAD,CAApB;AAEAW,EAAAA,SAAS,CAACU,OAAV,CAAmB,UAAUqD,UAAV,EAAsBjB,CAAtB,EAA0B;AAC3CiB,IAAAA,UAAU,CAACjC,WAAX,GAAyBhC,KAAK,CAACT,SAAD,CAA9B;;AACA,SAAK,IAAI2E,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAGD,UAAU,CAACtC,MAAX,CAAkBH,MAApD,EAA4D0C,QAAQ,EAApE,EAAwE;AACtE,UAAIC,KAAK,GAAGF,UAAU,CAACtC,MAAX,CAAkBuC,QAAlB,CAAZ;AACAC,MAAAA,KAAK,CAACjC,KAAN,GAAcC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB9C,SAA3B,CAAd;;AAEA,UAAI,CAAE4E,KAAK,CAAC7B,UAAZ,EAAwB;AACtBvC,QAAAA,cAAc,CAACoE,KAAK,CAACjC,KAAP,CAAd;;AACA,YAAI,CAAErC,eAAe,CAACsE,KAAK,CAAClC,IAAP,CAAf,CAA4BkC,KAAK,CAACjC,KAAlC,CAAN,EAAgD;AAC9CrC,UAAAA,eAAe,CAACsE,KAAK,CAAClC,IAAP,CAAf,CAA4BkC,KAAK,CAACjC,KAAlC,IAA2C,CAA3C;AACD,SAFD,MAGK;AACHrC,UAAAA,eAAe,CAACsE,KAAK,CAAClC,IAAP,CAAf,CAA4BkC,KAAK,CAACjC,KAAlC,KAA4C,CAA5C;AACD;;AACD+B,QAAAA,UAAU,CAACjC,WAAX,CAAuBmC,KAAK,CAACjC,KAA7B,KAAuC,CAAvC;AACD;AACF;AACF,GAjBD;AAmBAnB,EAAAA,cAAc;AACdC,EAAAA,iBAAiB;AACjBoD,EAAAA,gBAAgB;AAChBjD,EAAAA,UAAU,GArCyB,CAuCnC;;AACAC,EAAAA,cAAc;AACdC,EAAAA,UAAU;AACVH,EAAAA,UAAU;AACX","sourcesContent":["import './App.css';\nimport './funcs/processing.js'\nimport './funcs/processVars.js'\nimport './funcs/correlationVars.js'\nimport './funcs/correlation.js'\nimport './funcs/d3.min.js'\nimport './funcs/display'\nimport './funcs/displayVars'\nimport './funcs/docsUp'\nimport './funcs/docsUpVar'\nimport './funcs/downloads'\nimport './funcs/downloadsVars'\nimport './funcs/stoplist'\nimport './funcs/stoplistVars'\nimport './funcs/sweep'\nimport './funcs/sweepVars'\nimport './funcs/topicDocuments'\nimport './funcs/topictime'\nimport './funcs/topictimeVars'\nimport './funcs/topidDocVars'\nimport './funcs/vocab'\nimport './funcs/vocabVars'\n\n\nexport function queueLoad() {\n    reset();\n    d3.queue()\n      .defer(getStoplistUpload)\n      .defer(getDocsUpload)\n      .await(ready);\n  }\n\nfunction reset() {\n    vocabularySize = 0;\n    vocabularyCounts = {};\n    displayingStopwords = false;\n    sortVocabByTopic = false;\n    specificityScale = d3.scaleLinear().domain([0,1]).range([\"#ffffff\", \"#99d8c9\"]);\n    \n    d3.select(\"#num-topics-input\").property(\"value\", numTopics);\n  \n    stopwords = {};\n  \n    completeSweeps = 0;\n    requestedSweeps = 0;\n    d3.select(\"#iters\").text(completeSweeps);\n  \n    selectedTopic = -1;\n  \n    wordTopicCounts = {};\n    topicWordCounts = [];\n    tokensPerTopic = zeros(numTopics);\n    topicWeights = zeros(numTopics);\n    \n    documents = [];\n    d3.selectAll(\"div.document\").remove();\n  }\n  \nfunction ready(error, stops, lines) {\n    if (error) { alert(\"File upload failed. Please try again.\"); throw error;}\n    else {\n      // Create the stoplist\n      console.log(stops);\n      stops.split(/\\s+/).forEach(function (w) { console.log(w); stopwords[w] = 1; });\n  \n      // Load documents and populate the vocabulary\n      lines.split(\"\\n\").forEach(parseLine);\n  \n      sortTopicWords();\n      displayTopicWords();\n      toggleTopicDocuments(0);\n      //plotGraph();\n      \n      plotMatrix();\n      vocabTable();\n      createTimeSVGs();\n      timeSeries();\n    }\n  }\n  \nfunction parseLine ( line ) {\n    if (line == \"\") { return; }\n    var docID = documents.length;\n    var docDate = \"\";\n    var fields = line.split(\"\\t\");\n    var text = fields[0];  // Assume there's just one field, the text\n    if (fields.length == 3) {  // If it's in [ID]\\t[TAG]\\t[TEXT] format...\n      docID = fields[0];\n      docDate = fields[1]; // do not interpret date as anything but a string\n      text = fields[2];\n    }\n  \n    var tokens = [];\n    var rawTokens = text.toLowerCase().match(wordPattern);\n    if (rawTokens == null) { return; }\n    var topicCounts = zeros(numTopics);\n  \n    rawTokens.forEach(function (word) {\n      if (word !== \"\") {\n        var topic = Math.floor(Math.random() * numTopics);\n  \n        if (word.length <= 2) { stopwords[word] = 1; }\n  \n        var isStopword = stopwords[word];\n        if (isStopword) {\n          // Record counts for stopwords, but nothing else\n          if (! vocabularyCounts[word]) {\n            vocabularyCounts[word] = 1;\n          }\n          else {\n            vocabularyCounts[word] += 1;\n          }\n        }\n        else {\n          tokensPerTopic[topic]++;\n          if (! wordTopicCounts[word]) {\n            wordTopicCounts[word] = {};\n            vocabularySize++;\n            vocabularyCounts[word] = 0;\n          }\n          if (! wordTopicCounts[word][topic]) {\n            wordTopicCounts[word][topic] = 0;\n          }\n          wordTopicCounts[word][topic] += 1;\n          vocabularyCounts[word] += 1;\n          topicCounts[topic] += 1;\n        }\n        tokens.push({\"word\":word, \"topic\":topic, \"isStopword\":isStopword });\n      }\n    });\n  \n    documents.push({ \"originalOrder\" : documents.length, \"id\" : docID, \"date\" : docDate, \"originalText\" : text, \"tokens\" : tokens, \"topicCounts\" : topicCounts});\n    d3.select(\"div#docs-page\").append(\"div\")\n       .attr(\"class\", \"document\")\n       .text(\"[\" + docID + \"] \" + truncate(text));\n  }\n// used by addStop, removeStop in vocab, saveTopicKeys in downloads, sweep in sweep\nfunction sortTopicWords() {\n    topicWordCounts = [];\n    for (var topic = 0; topic < numTopics; topic++) {\n      topicWordCounts[topic] = [];\n    }\n  \n    for (var word in wordTopicCounts) {\n      for (var topic in wordTopicCounts[word]) {\n        topicWordCounts[topic].push({\"word\":word, \"count\":wordTopicCounts[word][topic]});\n      }\n    }\n  \n    for (var topic = 0; topic < numTopics; topic++) {\n      topicWordCounts[topic].sort(byCountDescending);\n    }\n  }\n\n// Used by saveDocTopics, saveTopicWords, saveGraph in downloads, getTopicCorrelations in correlation\nfunction zeros(n) {\n  var x = new Array(n);\n  for (var i = 0; i < n; i++) { x[i] = 0.0; }\n  return x;\n}\n\n\n// Change the strings at the end of these lines to reset the default filenames!\n\n\nfunction onDocumentFileChange(input) {\n  documentsFileArray = input.files;\n}\nfunction onStopwordFileChange(input) {\n  stoplistFileArray = input.files;\n}\n\n// This function is the callback for \"input\", it changes as we move the slider\n//  without releasing it.\nfunction updateTopicCount(input) {\n  d3.select(\"#num_topics_display\").text(input.value);\n}\n// This function is the callback for \"change\", it only fires when we release the\n//  slider to select a new value.\nfunction onTopicsChange(input) {\n  console.log(\"Changing # of topics: \" + input.value);\n  \n  var newNumTopics = Number(input.value);\n  if (! isNaN(newNumTopics) && newNumTopics > 0 && newNumTopics !== numTopics) {\n    changeNumTopics(Number(input.value));\n  }\n}\n\nfunction changeNumTopics(numTopics_) {\n  numTopics = numTopics_;\n  selectedTopic = -1;\n  \n  completeSweeps = 0;\n  requestedSweeps = 0;\n  d3.select(\"#iters\").text(completeSweeps);\n  \n  wordTopicCounts = {};\n  Object.keys(vocabularyCounts).forEach(function (word) { wordTopicCounts[word] = {} });\n  \n  topicWordCounts = [];\n  tokensPerTopic = zeros(numTopics);\n  topicWeights = zeros(numTopics);\n  \n  documents.forEach( function( currentDoc, i ) {\n    currentDoc.topicCounts = zeros(numTopics);\n    for (var position = 0; position < currentDoc.tokens.length; position++) {\n      var token = currentDoc.tokens[position];\n      token.topic = Math.floor(Math.random() * numTopics);\n      \n      if (! token.isStopword) {\n        tokensPerTopic[token.topic]++;\n        if (! wordTopicCounts[token.word][token.topic]) {\n          wordTopicCounts[token.word][token.topic] = 1;\n        }\n        else {\n          wordTopicCounts[token.word][token.topic] += 1;\n        }\n        currentDoc.topicCounts[token.topic] += 1;\n      }\n    }\n  });\n\n  sortTopicWords();\n  displayTopicWords();\n  reorderDocuments();\n  vocabTable();\n  \n  // Restart the visualizations\n  createTimeSVGs();\n  timeSeries();\n  plotMatrix();\n}\n"]},"metadata":{},"sourceType":"module"}